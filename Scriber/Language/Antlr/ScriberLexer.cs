//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Scriber.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Scriber.Language.Antlr {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class ScriberLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, LINE_COMMENT=2, NEWLINE=3, AT=4, QUOTATION=5, PERCENT=6, CURRENCY=7, 
		AMPERSAND=8, TILDE=9, UNDERSCORE=10, PARANTHESESOPEN=11, PARANTHESESCLOSE=12, 
		CURLYOPEN=13, CURLYCLOSE=14, BRACKETOPEN=15, BRACKETCLOSE=16, COLON=17, 
		COMMA=18, CARET=19, BACKSLASH=20, SPACE=21, TEXT=22;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"COMMENT", "LINE_COMMENT", "NEWLINE", "AT", "QUOTATION", "PERCENT", "CURRENCY", 
		"AMPERSAND", "TILDE", "UNDERSCORE", "PARANTHESESOPEN", "PARANTHESESCLOSE", 
		"CURLYOPEN", "CURLYCLOSE", "BRACKETOPEN", "BRACKETCLOSE", "COLON", "COMMA", 
		"CARET", "BACKSLASH", "SPACE", "TEXT"
	};


	public ScriberLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ScriberLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'\"'", "'%'", "'$'", "'&'", "'~'", null, 
		"'('", "')'", "'{'", "'}'", "'['", "']'", "':'", "','", null, null, "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "LINE_COMMENT", "NEWLINE", "AT", "QUOTATION", "PERCENT", 
		"CURRENCY", "AMPERSAND", "TILDE", "UNDERSCORE", "PARANTHESESOPEN", "PARANTHESESCLOSE", 
		"CURLYOPEN", "CURLYCLOSE", "BRACKETOPEN", "BRACKETCLOSE", "COLON", "COMMA", 
		"CARET", "BACKSLASH", "SPACE", "TEXT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Scriber.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ScriberLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x18', '\x86', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x34', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\x37', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x42', '\n', '\x3', '\f', '\x3', 
		'\xE', '\x3', '\x45', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x5', '\x4', 'J', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x6', 
		'\x4', 'N', '\n', '\x4', '\r', '\x4', '\xE', '\x4', 'O', '\x3', '\x5', 
		'\x6', '\x5', 'S', '\n', '\x5', '\r', '\x5', '\xE', '\x5', 'T', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x6', 
		'\v', '\x62', '\n', '\v', '\r', '\v', '\xE', '\v', '\x63', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x6', '\x14', 'w', '\n', '\x14', '\r', '\x14', '\xE', '\x14', 
		'x', '\x3', '\x15', '\x6', '\x15', '|', '\n', '\x15', '\r', '\x15', '\xE', 
		'\x15', '}', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x6', '\x17', 
		'\x83', '\n', '\x17', '\r', '\x17', '\xE', '\x17', '\x84', '\x3', '\x35', 
		'\x2', '\x18', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', 
		'\a', '\r', '\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', 
		'\x17', '\r', '\x19', '\xE', '\x1B', '\xF', '\x1D', '\x10', '\x1F', '\x11', 
		'!', '\x12', '#', '\x13', '%', '\x14', '\'', '\x15', ')', '\x16', '+', 
		'\x17', '-', '\x18', '\x3', '\x2', '\x4', '\x4', '\x2', '\f', '\f', '\xF', 
		'\xF', '\t', '\x2', '#', '#', '/', '\x30', '\x32', ';', '=', '=', '\x41', 
		'\x41', '\x43', '\\', '\x63', '|', '\x2', '\x8F', '\x2', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x2', '!', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '#', '\x3', '\x2', '\x2', '\x2', '\x2', '%', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\'', '\x3', '\x2', '\x2', '\x2', '\x2', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '+', '\x3', '\x2', '\x2', '\x2', '\x2', '-', '\x3', 
		'\x2', '\x2', '\x2', '\x3', '/', '\x3', '\x2', '\x2', '\x2', '\x5', '=', 
		'\x3', '\x2', '\x2', '\x2', '\a', 'M', '\x3', '\x2', '\x2', '\x2', '\t', 
		'R', '\x3', '\x2', '\x2', '\x2', '\v', 'V', '\x3', '\x2', '\x2', '\x2', 
		'\r', 'X', '\x3', '\x2', '\x2', '\x2', '\xF', 'Z', '\x3', '\x2', '\x2', 
		'\x2', '\x11', '\\', '\x3', '\x2', '\x2', '\x2', '\x13', '^', '\x3', '\x2', 
		'\x2', '\x2', '\x15', '\x61', '\x3', '\x2', '\x2', '\x2', '\x17', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\x19', 'g', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'i', '\x3', '\x2', '\x2', '\x2', '\x1D', 'k', '\x3', '\x2', '\x2', '\x2', 
		'\x1F', 'm', '\x3', '\x2', '\x2', '\x2', '!', 'o', '\x3', '\x2', '\x2', 
		'\x2', '#', 'q', '\x3', '\x2', '\x2', '\x2', '%', 's', '\x3', '\x2', '\x2', 
		'\x2', '\'', 'v', '\x3', '\x2', '\x2', '\x2', ')', '{', '\x3', '\x2', 
		'\x2', '\x2', '+', '\x7F', '\x3', '\x2', '\x2', '\x2', '-', '\x82', '\x3', 
		'\x2', '\x2', '\x2', '/', '\x30', '\a', '\x31', '\x2', '\x2', '\x30', 
		'\x31', '\a', ',', '\x2', '\x2', '\x31', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x34', '\v', '\x2', '\x2', '\x2', '\x33', '\x32', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x37', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x38', '\x3', '\x2', '\x2', '\x2', '\x37', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x39', '\a', ',', '\x2', '\x2', '\x39', 
		':', '\a', '\x31', '\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', 
		';', '<', '\b', '\x2', '\x2', '\x2', '<', '\x4', '\x3', '\x2', '\x2', 
		'\x2', '=', '>', '\a', '\x31', '\x2', '\x2', '>', '?', '\a', '\x31', '\x2', 
		'\x2', '?', '\x43', '\x3', '\x2', '\x2', '\x2', '@', '\x42', '\n', '\x2', 
		'\x2', '\x2', '\x41', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x46', '\x3', '\x2', 
		'\x2', '\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', 
		'\b', '\x3', '\x2', '\x2', 'G', '\x6', '\x3', '\x2', '\x2', '\x2', 'H', 
		'J', '\a', '\xF', '\x2', '\x2', 'I', 'H', '\x3', '\x2', '\x2', '\x2', 
		'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', '\x2', 
		'K', 'N', '\a', '\f', '\x2', '\x2', 'L', 'N', '\a', '\xF', '\x2', '\x2', 
		'M', 'I', '\x3', '\x2', '\x2', '\x2', 'M', 'L', '\x3', '\x2', '\x2', '\x2', 
		'N', 'O', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 
		'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', '\b', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'S', '\a', '\x42', '\x2', '\x2', 'R', 'Q', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', '\n', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'W', '\a', '$', '\x2', '\x2', 'W', '\f', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'Y', '\a', '\'', '\x2', '\x2', 'Y', '\xE', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '[', '\a', '&', '\x2', '\x2', '[', '\x10', '\x3', '\x2', 
		'\x2', '\x2', '\\', ']', '\a', '(', '\x2', '\x2', ']', '\x12', '\x3', 
		'\x2', '\x2', '\x2', '^', '_', '\a', '\x80', '\x2', '\x2', '_', '\x14', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x62', '\a', '\x61', '\x2', '\x2', '\x61', 
		'`', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x16', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'\x66', '\a', '*', '\x2', '\x2', '\x66', '\x18', '\x3', '\x2', '\x2', 
		'\x2', 'g', 'h', '\a', '+', '\x2', '\x2', 'h', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', 'i', 'j', '\a', '}', '\x2', '\x2', 'j', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', 'k', 'l', '\a', '\x7F', '\x2', '\x2', 'l', '\x1E', '\x3', '\x2', 
		'\x2', '\x2', 'm', 'n', '\a', ']', '\x2', '\x2', 'n', ' ', '\x3', '\x2', 
		'\x2', '\x2', 'o', 'p', '\a', '_', '\x2', '\x2', 'p', '\"', '\x3', '\x2', 
		'\x2', '\x2', 'q', 'r', '\a', '<', '\x2', '\x2', 'r', '$', '\x3', '\x2', 
		'\x2', '\x2', 's', 't', '\a', '.', '\x2', '\x2', 't', '&', '\x3', '\x2', 
		'\x2', '\x2', 'u', 'w', '\a', '`', '\x2', '\x2', 'v', 'u', '\x3', '\x2', 
		'\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', '\x2', 'x', 'v', '\x3', '\x2', 
		'\x2', '\x2', 'x', 'y', '\x3', '\x2', '\x2', '\x2', 'y', '(', '\x3', '\x2', 
		'\x2', '\x2', 'z', '|', '\a', '^', '\x2', '\x2', '{', 'z', '\x3', '\x2', 
		'\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', '}', '{', '\x3', '\x2', 
		'\x2', '\x2', '}', '~', '\x3', '\x2', '\x2', '\x2', '~', '*', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', '\x80', '\a', '\"', '\x2', '\x2', '\x80', ',', '\x3', 
		'\x2', '\x2', '\x2', '\x81', '\x83', '\t', '\x3', '\x2', '\x2', '\x82', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x82', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x85', '.', '\x3', '\x2', '\x2', '\x2', '\xE', '\x2', 
		'\x35', '\x43', 'I', 'M', 'O', 'T', '\x63', 'x', '}', '\x82', '\x84', 
		'\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Scriber.Language.Antlr

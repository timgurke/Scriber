//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Scriber.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Scriber.Language.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class ScriberParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, LINE_COMMENT=2, NEWLINE=3, AT=4, QUOTATION=5, PERCENT=6, CURRENCY=7, 
		AMPERSAND=8, TILDE=9, UNDERSCORE=10, PARANTHESESOPEN=11, PARANTHESESCLOSE=12, 
		CURLYOPEN=13, CURLYCLOSE=14, BRACKETOPEN=15, BRACKETCLOSE=16, COLON=17, 
		COMMA=18, CARET=19, BACKSLASH=20, SPACE=21, TEXT=22;
	public const int
		RULE_root = 0, RULE_line = 1, RULE_lineContent = 2, RULE_environment = 3, 
		RULE_inlineEnvironment = 4, RULE_multilineEnvironment = 5, RULE_arguments = 6, 
		RULE_argument = 7, RULE_jsonObject = 8, RULE_keyValuePair = 9, RULE_key = 10, 
		RULE_value = 11, RULE_quotation = 12, RULE_identifier = 13, RULE_quoated = 14, 
		RULE_text = 15, RULE_standard = 16;
	public static readonly string[] ruleNames = {
		"root", "line", "lineContent", "environment", "inlineEnvironment", "multilineEnvironment", 
		"arguments", "argument", "jsonObject", "keyValuePair", "key", "value", 
		"quotation", "identifier", "quoated", "text", "standard"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'\"'", "'%'", "'$'", "'&'", "'~'", null, 
		"'('", "')'", "'{'", "'}'", "'['", "']'", "':'", "','", null, null, "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "LINE_COMMENT", "NEWLINE", "AT", "QUOTATION", "PERCENT", 
		"CURRENCY", "AMPERSAND", "TILDE", "UNDERSCORE", "PARANTHESESOPEN", "PARANTHESESCLOSE", 
		"CURLYOPEN", "CURLYCLOSE", "BRACKETOPEN", "BRACKETCLOSE", "COLON", "COMMA", 
		"CARET", "BACKSLASH", "SPACE", "TEXT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Scriber.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ScriberParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ScriberParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ScriberParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class RootContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(ScriberParser.Eof, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScriberVisitor<TResult> typedVisitor = visitor as IScriberVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEWLINE) | (1L << AT) | (1L << QUOTATION) | (1L << PERCENT) | (1L << CURRENCY) | (1L << AMPERSAND) | (1L << TILDE) | (1L << UNDERSCORE) | (1L << PARANTHESESOPEN) | (1L << PARANTHESESCLOSE) | (1L << BRACKETOPEN) | (1L << COLON) | (1L << COMMA) | (1L << CARET) | (1L << BACKSLASH) | (1L << SPACE) | (1L << TEXT))) != 0)) {
				{
				{
				State = 34; line();
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 40; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(ScriberParser.NEWLINE, 0); }
		public LineContentContext lineContent() {
			return GetRuleContext<LineContentContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScriberVisitor<TResult> typedVisitor = visitor as IScriberVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AT) | (1L << QUOTATION) | (1L << PERCENT) | (1L << CURRENCY) | (1L << AMPERSAND) | (1L << TILDE) | (1L << UNDERSCORE) | (1L << PARANTHESESOPEN) | (1L << PARANTHESESCLOSE) | (1L << BRACKETOPEN) | (1L << COLON) | (1L << COMMA) | (1L << CARET) | (1L << BACKSLASH) | (1L << SPACE) | (1L << TEXT))) != 0)) {
				{
				State = 42; lineContent();
				}
			}

			State = 45; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContentContext : ParserRuleContext {
		public EnvironmentContext[] environment() {
			return GetRuleContexts<EnvironmentContext>();
		}
		public EnvironmentContext environment(int i) {
			return GetRuleContext<EnvironmentContext>(i);
		}
		public QuotationContext[] quotation() {
			return GetRuleContexts<QuotationContext>();
		}
		public QuotationContext quotation(int i) {
			return GetRuleContext<QuotationContext>(i);
		}
		public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		public LineContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineContent; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScriberVisitor<TResult> typedVisitor = visitor as IScriberVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContentContext lineContent() {
		LineContentContext _localctx = new LineContentContext(Context, State);
		EnterRule(_localctx, 4, RULE_lineContent);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 50;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case AT:
					case BRACKETOPEN:
						{
						State = 47; environment();
						}
						break;
					case QUOTATION:
						{
						State = 48; quotation();
						}
						break;
					case PERCENT:
					case CURRENCY:
					case AMPERSAND:
					case TILDE:
					case UNDERSCORE:
					case PARANTHESESOPEN:
					case PARANTHESESCLOSE:
					case COLON:
					case COMMA:
					case CARET:
					case BACKSLASH:
					case SPACE:
					case TEXT:
						{
						State = 49; text();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 52;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnvironmentContext : ParserRuleContext {
		public InlineEnvironmentContext inlineEnvironment() {
			return GetRuleContext<InlineEnvironmentContext>(0);
		}
		public MultilineEnvironmentContext multilineEnvironment() {
			return GetRuleContext<MultilineEnvironmentContext>(0);
		}
		public EnvironmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_environment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScriberVisitor<TResult> typedVisitor = visitor as IScriberVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnvironment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnvironmentContext environment() {
		EnvironmentContext _localctx = new EnvironmentContext(Context, State);
		EnterRule(_localctx, 6, RULE_environment);
		try {
			State = 56;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BRACKETOPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54; inlineEnvironment();
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 55; multilineEnvironment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineEnvironmentContext : ParserRuleContext {
		public ITerminalNode BRACKETOPEN() { return GetToken(ScriberParser.BRACKETOPEN, 0); }
		public ITerminalNode BRACKETCLOSE() { return GetToken(ScriberParser.BRACKETCLOSE, 0); }
		public ITerminalNode AT() { return GetToken(ScriberParser.AT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode PARANTHESESOPEN() { return GetToken(ScriberParser.PARANTHESESOPEN, 0); }
		public ITerminalNode PARANTHESESCLOSE() { return GetToken(ScriberParser.PARANTHESESCLOSE, 0); }
		public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public InlineEnvironmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineEnvironment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScriberVisitor<TResult> typedVisitor = visitor as IScriberVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineEnvironment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineEnvironmentContext inlineEnvironment() {
		InlineEnvironmentContext _localctx = new InlineEnvironmentContext(Context, State);
		EnterRule(_localctx, 8, RULE_inlineEnvironment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58; Match(BRACKETOPEN);
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PERCENT) | (1L << CURRENCY) | (1L << AMPERSAND) | (1L << TILDE) | (1L << UNDERSCORE) | (1L << PARANTHESESOPEN) | (1L << PARANTHESESCLOSE) | (1L << COLON) | (1L << COMMA) | (1L << CARET) | (1L << BACKSLASH) | (1L << SPACE) | (1L << TEXT))) != 0)) {
				{
				{
				State = 59; text();
				}
				}
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 65; Match(BRACKETCLOSE);
			State = 66; Match(AT);
			State = 67; identifier();
			State = 68; Match(PARANTHESESOPEN);
			State = 70;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 69; arguments();
				}
				break;
			}
			State = 72; Match(PARANTHESESCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultilineEnvironmentContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(ScriberParser.AT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode PARANTHESESOPEN() { return GetToken(ScriberParser.PARANTHESESOPEN, 0); }
		public ITerminalNode PARANTHESESCLOSE() { return GetToken(ScriberParser.PARANTHESESCLOSE, 0); }
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ITerminalNode CURLYOPEN() { return GetToken(ScriberParser.CURLYOPEN, 0); }
		public ITerminalNode CURLYCLOSE() { return GetToken(ScriberParser.CURLYCLOSE, 0); }
		public LineContentContext[] lineContent() {
			return GetRuleContexts<LineContentContext>();
		}
		public LineContentContext lineContent(int i) {
			return GetRuleContext<LineContentContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(ScriberParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(ScriberParser.NEWLINE, i);
		}
		public ITerminalNode[] SPACE() { return GetTokens(ScriberParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(ScriberParser.SPACE, i);
		}
		public MultilineEnvironmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multilineEnvironment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScriberVisitor<TResult> typedVisitor = visitor as IScriberVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultilineEnvironment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultilineEnvironmentContext multilineEnvironment() {
		MultilineEnvironmentContext _localctx = new MultilineEnvironmentContext(Context, State);
		EnterRule(_localctx, 10, RULE_multilineEnvironment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(AT);
			State = 75; identifier();
			State = 76; Match(PARANTHESESOPEN);
			State = 78;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 77; arguments();
				}
				break;
			}
			State = 80; Match(PARANTHESESCLOSE);
			State = 96;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NEWLINE || _la==SPACE) {
					{
					{
					State = 81;
					_la = TokenStream.LA(1);
					if ( !(_la==NEWLINE || _la==SPACE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 86;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 87; Match(CURLYOPEN);
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEWLINE) | (1L << AT) | (1L << QUOTATION) | (1L << PERCENT) | (1L << CURRENCY) | (1L << AMPERSAND) | (1L << TILDE) | (1L << UNDERSCORE) | (1L << PARANTHESESOPEN) | (1L << PARANTHESESCLOSE) | (1L << BRACKETOPEN) | (1L << COLON) | (1L << COMMA) | (1L << CARET) | (1L << BACKSLASH) | (1L << SPACE) | (1L << TEXT))) != 0)) {
					{
					State = 90;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case AT:
					case QUOTATION:
					case PERCENT:
					case CURRENCY:
					case AMPERSAND:
					case TILDE:
					case UNDERSCORE:
					case PARANTHESESOPEN:
					case PARANTHESESCLOSE:
					case BRACKETOPEN:
					case COLON:
					case COMMA:
					case CARET:
					case BACKSLASH:
					case SPACE:
					case TEXT:
						{
						State = 88; lineContent();
						}
						break;
					case NEWLINE:
						{
						State = 89; Match(NEWLINE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 94;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 95; Match(CURLYCLOSE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ScriberParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ScriberParser.COMMA, i);
		}
		public ITerminalNode[] SPACE() { return GetTokens(ScriberParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(ScriberParser.SPACE, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScriberVisitor<TResult> typedVisitor = visitor as IScriberVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 12, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; argument();
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 99; Match(COMMA);
				State = 100; Match(SPACE);
				State = 101; argument();
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public JsonObjectContext jsonObject() {
			return GetRuleContext<JsonObjectContext>(0);
		}
		public StandardContext standard() {
			return GetRuleContext<StandardContext>(0);
		}
		public QuotationContext quotation() {
			return GetRuleContext<QuotationContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScriberVisitor<TResult> typedVisitor = visitor as IScriberVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 14, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURLYOPEN:
				{
				State = 107; jsonObject();
				}
				break;
			case PERCENT:
			case CURRENCY:
			case AMPERSAND:
			case TILDE:
			case UNDERSCORE:
			case PARANTHESESOPEN:
			case PARANTHESESCLOSE:
			case COLON:
			case COMMA:
			case CARET:
			case BACKSLASH:
			case SPACE:
			case TEXT:
				{
				State = 108; standard();
				}
				break;
			case QUOTATION:
				{
				State = 109; quotation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonObjectContext : ParserRuleContext {
		public ITerminalNode CURLYOPEN() { return GetToken(ScriberParser.CURLYOPEN, 0); }
		public ITerminalNode CURLYCLOSE() { return GetToken(ScriberParser.CURLYCLOSE, 0); }
		public ITerminalNode[] SPACE() { return GetTokens(ScriberParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(ScriberParser.SPACE, i);
		}
		public KeyValuePairContext[] keyValuePair() {
			return GetRuleContexts<KeyValuePairContext>();
		}
		public KeyValuePairContext keyValuePair(int i) {
			return GetRuleContext<KeyValuePairContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ScriberParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ScriberParser.COMMA, i);
		}
		public JsonObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonObject; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScriberVisitor<TResult> typedVisitor = visitor as IScriberVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonObjectContext jsonObject() {
		JsonObjectContext _localctx = new JsonObjectContext(Context, State);
		EnterRule(_localctx, 16, RULE_jsonObject);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; Match(CURLYOPEN);
			State = 114;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 113; Match(SPACE);
				}
				break;
			}
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEXT) {
				{
				State = 116; keyValuePair();
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 117; Match(COMMA);
					State = 118; Match(SPACE);
					State = 119; keyValuePair();
					}
					}
					State = 124;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SPACE) {
				{
				State = 127; Match(SPACE);
				}
			}

			State = 130; Match(CURLYCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValuePairContext : ParserRuleContext {
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(ScriberParser.COLON, 0); }
		public ITerminalNode SPACE() { return GetToken(ScriberParser.SPACE, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public KeyValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValuePair; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScriberVisitor<TResult> typedVisitor = visitor as IScriberVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValuePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValuePairContext keyValuePair() {
		KeyValuePairContext _localctx = new KeyValuePairContext(Context, State);
		EnterRule(_localctx, 18, RULE_keyValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; key();
			State = 133; Match(COLON);
			State = 134; Match(SPACE);
			State = 135; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public KeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScriberVisitor<TResult> typedVisitor = visitor as IScriberVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyContext key() {
		KeyContext _localctx = new KeyContext(Context, State);
		EnterRule(_localctx, 20, RULE_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScriberVisitor<TResult> typedVisitor = visitor as IScriberVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 22, RULE_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuotationContext : ParserRuleContext {
		public ITerminalNode[] QUOTATION() { return GetTokens(ScriberParser.QUOTATION); }
		public ITerminalNode QUOTATION(int i) {
			return GetToken(ScriberParser.QUOTATION, i);
		}
		public QuoatedContext quoated() {
			return GetRuleContext<QuoatedContext>(0);
		}
		public QuotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quotation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScriberVisitor<TResult> typedVisitor = visitor as IScriberVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuotationContext quotation() {
		QuotationContext _localctx = new QuotationContext(Context, State);
		EnterRule(_localctx, 24, RULE_quotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; Match(QUOTATION);
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AT) | (1L << PERCENT) | (1L << CURRENCY) | (1L << AMPERSAND) | (1L << TILDE) | (1L << UNDERSCORE) | (1L << PARANTHESESOPEN) | (1L << PARANTHESESCLOSE) | (1L << CURLYOPEN) | (1L << CURLYCLOSE) | (1L << BRACKETOPEN) | (1L << BRACKETCLOSE) | (1L << COLON) | (1L << COMMA) | (1L << CARET) | (1L << BACKSLASH) | (1L << SPACE) | (1L << TEXT))) != 0)) {
				{
				State = 142; quoated();
				}
			}

			State = 145; Match(QUOTATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode[] TEXT() { return GetTokens(ScriberParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(ScriberParser.TEXT, i);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScriberVisitor<TResult> typedVisitor = visitor as IScriberVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 26, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 147; Match(TEXT);
				}
				}
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==TEXT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuoatedContext : ParserRuleContext {
		public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		public ITerminalNode[] AT() { return GetTokens(ScriberParser.AT); }
		public ITerminalNode AT(int i) {
			return GetToken(ScriberParser.AT, i);
		}
		public ITerminalNode[] CURLYOPEN() { return GetTokens(ScriberParser.CURLYOPEN); }
		public ITerminalNode CURLYOPEN(int i) {
			return GetToken(ScriberParser.CURLYOPEN, i);
		}
		public ITerminalNode[] CURLYCLOSE() { return GetTokens(ScriberParser.CURLYCLOSE); }
		public ITerminalNode CURLYCLOSE(int i) {
			return GetToken(ScriberParser.CURLYCLOSE, i);
		}
		public ITerminalNode[] BRACKETOPEN() { return GetTokens(ScriberParser.BRACKETOPEN); }
		public ITerminalNode BRACKETOPEN(int i) {
			return GetToken(ScriberParser.BRACKETOPEN, i);
		}
		public ITerminalNode[] BRACKETCLOSE() { return GetTokens(ScriberParser.BRACKETCLOSE); }
		public ITerminalNode BRACKETCLOSE(int i) {
			return GetToken(ScriberParser.BRACKETCLOSE, i);
		}
		public QuoatedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quoated; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScriberVisitor<TResult> typedVisitor = visitor as IScriberVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuoated(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuoatedContext quoated() {
		QuoatedContext _localctx = new QuoatedContext(Context, State);
		EnterRule(_localctx, 28, RULE_quoated);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 158;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PERCENT:
				case CURRENCY:
				case AMPERSAND:
				case TILDE:
				case UNDERSCORE:
				case PARANTHESESOPEN:
				case PARANTHESESCLOSE:
				case COLON:
				case COMMA:
				case CARET:
				case BACKSLASH:
				case SPACE:
				case TEXT:
					{
					State = 152; text();
					}
					break;
				case AT:
					{
					State = 153; Match(AT);
					}
					break;
				case CURLYOPEN:
					{
					State = 154; Match(CURLYOPEN);
					}
					break;
				case CURLYCLOSE:
					{
					State = 155; Match(CURLYCLOSE);
					}
					break;
				case BRACKETOPEN:
					{
					State = 156; Match(BRACKETOPEN);
					}
					break;
				case BRACKETCLOSE:
					{
					State = 157; Match(BRACKETCLOSE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AT) | (1L << PERCENT) | (1L << CURRENCY) | (1L << AMPERSAND) | (1L << TILDE) | (1L << UNDERSCORE) | (1L << PARANTHESESOPEN) | (1L << PARANTHESESCLOSE) | (1L << CURLYOPEN) | (1L << CURLYCLOSE) | (1L << BRACKETOPEN) | (1L << BRACKETCLOSE) | (1L << COLON) | (1L << COMMA) | (1L << CARET) | (1L << BACKSLASH) | (1L << SPACE) | (1L << TEXT))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		public StandardContext[] standard() {
			return GetRuleContexts<StandardContext>();
		}
		public StandardContext standard(int i) {
			return GetRuleContext<StandardContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ScriberParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ScriberParser.COMMA, i);
		}
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScriberVisitor<TResult> typedVisitor = visitor as IScriberVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 30, RULE_text);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 164;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
					case 1:
						{
						State = 162; standard();
						}
						break;
					case 2:
						{
						State = 163; Match(COMMA);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 166;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandardContext : ParserRuleContext {
		public ITerminalNode[] TEXT() { return GetTokens(ScriberParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(ScriberParser.TEXT, i);
		}
		public ITerminalNode[] PERCENT() { return GetTokens(ScriberParser.PERCENT); }
		public ITerminalNode PERCENT(int i) {
			return GetToken(ScriberParser.PERCENT, i);
		}
		public ITerminalNode[] CURRENCY() { return GetTokens(ScriberParser.CURRENCY); }
		public ITerminalNode CURRENCY(int i) {
			return GetToken(ScriberParser.CURRENCY, i);
		}
		public ITerminalNode[] AMPERSAND() { return GetTokens(ScriberParser.AMPERSAND); }
		public ITerminalNode AMPERSAND(int i) {
			return GetToken(ScriberParser.AMPERSAND, i);
		}
		public ITerminalNode[] TILDE() { return GetTokens(ScriberParser.TILDE); }
		public ITerminalNode TILDE(int i) {
			return GetToken(ScriberParser.TILDE, i);
		}
		public ITerminalNode[] UNDERSCORE() { return GetTokens(ScriberParser.UNDERSCORE); }
		public ITerminalNode UNDERSCORE(int i) {
			return GetToken(ScriberParser.UNDERSCORE, i);
		}
		public ITerminalNode[] PARANTHESESOPEN() { return GetTokens(ScriberParser.PARANTHESESOPEN); }
		public ITerminalNode PARANTHESESOPEN(int i) {
			return GetToken(ScriberParser.PARANTHESESOPEN, i);
		}
		public ITerminalNode[] PARANTHESESCLOSE() { return GetTokens(ScriberParser.PARANTHESESCLOSE); }
		public ITerminalNode PARANTHESESCLOSE(int i) {
			return GetToken(ScriberParser.PARANTHESESCLOSE, i);
		}
		public ITerminalNode[] COLON() { return GetTokens(ScriberParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(ScriberParser.COLON, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ScriberParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ScriberParser.COMMA, i);
		}
		public ITerminalNode[] CARET() { return GetTokens(ScriberParser.CARET); }
		public ITerminalNode CARET(int i) {
			return GetToken(ScriberParser.CARET, i);
		}
		public ITerminalNode[] BACKSLASH() { return GetTokens(ScriberParser.BACKSLASH); }
		public ITerminalNode BACKSLASH(int i) {
			return GetToken(ScriberParser.BACKSLASH, i);
		}
		public ITerminalNode[] SPACE() { return GetTokens(ScriberParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(ScriberParser.SPACE, i);
		}
		public StandardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standard; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScriberVisitor<TResult> typedVisitor = visitor as IScriberVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandard(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StandardContext standard() {
		StandardContext _localctx = new StandardContext(Context, State);
		EnterRule(_localctx, 32, RULE_standard);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 168;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PERCENT) | (1L << CURRENCY) | (1L << AMPERSAND) | (1L << TILDE) | (1L << UNDERSCORE) | (1L << PARANTHESESOPEN) | (1L << PARANTHESESCLOSE) | (1L << COLON) | (1L << COMMA) | (1L << CARET) | (1L << BACKSLASH) | (1L << SPACE) | (1L << TEXT))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 171;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x18', '\xB0', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x3', '\x2', '\a', 
		'\x2', '&', '\n', '\x2', '\f', '\x2', '\xE', '\x2', ')', '\v', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x5', '\x3', '.', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x6', '\x4', '\x35', '\n', '\x4', '\r', '\x4', '\xE', '\x4', '\x36', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', ';', '\n', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\a', '\x6', '?', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 
		'\x42', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', 'I', '\n', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'Q', '\n', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 'U', '\n', '\a', 
		'\f', '\a', '\xE', '\a', 'X', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\a', '\a', ']', '\n', '\a', '\f', '\a', '\xE', '\a', '`', '\v', 
		'\a', '\x3', '\a', '\x5', '\a', '\x63', '\n', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 'i', '\n', '\b', '\f', '\b', 
		'\xE', '\b', 'l', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', 'q', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', 'u', '\n', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', 
		'{', '\n', '\n', '\f', '\n', '\xE', '\n', '~', '\v', '\n', '\x5', '\n', 
		'\x80', '\n', '\n', '\x3', '\n', '\x5', '\n', '\x83', '\n', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\x92', '\n', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x6', '\xF', '\x97', '\n', '\xF', '\r', '\xF', 
		'\xE', '\xF', '\x98', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x6', '\x10', '\xA1', '\n', '\x10', 
		'\r', '\x10', '\xE', '\x10', '\xA2', '\x3', '\x11', '\x3', '\x11', '\x6', 
		'\x11', '\xA7', '\n', '\x11', '\r', '\x11', '\xE', '\x11', '\xA8', '\x3', 
		'\x12', '\x6', '\x12', '\xAC', '\n', '\x12', '\r', '\x12', '\xE', '\x12', 
		'\xAD', '\x3', '\x12', '\x2', '\x2', '\x13', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '\x2', '\x4', '\x4', '\x2', '\x5', '\x5', '\x17', '\x17', 
		'\x4', '\x2', '\b', '\xE', '\x13', '\x18', '\x2', '\xBD', '\x2', '\'', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '-', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\b', ':', '\x3', '\x2', '\x2', '\x2', 
		'\n', '<', '\x3', '\x2', '\x2', '\x2', '\f', 'L', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\x64', '\x3', '\x2', '\x2', '\x2', '\x10', 'p', '\x3', 
		'\x2', '\x2', '\x2', '\x12', 'r', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x86', '\x3', '\x2', '\x2', '\x2', '\x16', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x96', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\xA0', '\x3', '\x2', '\x2', '\x2', ' ', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\xAB', '\x3', '\x2', '\x2', '\x2', '$', '&', '\x5', '\x4', 
		'\x3', '\x2', '%', '$', '\x3', '\x2', '\x2', '\x2', '&', ')', '\x3', '\x2', 
		'\x2', '\x2', '\'', '%', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\x3', 
		'\x2', '\x2', '\x2', '(', '*', '\x3', '\x2', '\x2', '\x2', ')', '\'', 
		'\x3', '\x2', '\x2', '\x2', '*', '+', '\a', '\x2', '\x2', '\x3', '+', 
		'\x3', '\x3', '\x2', '\x2', '\x2', ',', '.', '\x5', '\x6', '\x4', '\x2', 
		'-', ',', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x3', '\x2', '\x2', '\x2', 
		'.', '/', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\a', '\x5', '\x2', 
		'\x2', '\x30', '\x5', '\x3', '\x2', '\x2', '\x2', '\x31', '\x35', '\x5', 
		'\b', '\x5', '\x2', '\x32', '\x35', '\x5', '\x1A', '\xE', '\x2', '\x33', 
		'\x35', '\x5', ' ', '\x11', '\x2', '\x34', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\a', '\x3', '\x2', '\x2', '\x2', '\x38', ';', '\x5', '\n', 
		'\x6', '\x2', '\x39', ';', '\x5', '\f', '\a', '\x2', ':', '\x38', '\x3', 
		'\x2', '\x2', '\x2', ':', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '\t', 
		'\x3', '\x2', '\x2', '\x2', '<', '@', '\a', '\x11', '\x2', '\x2', '=', 
		'?', '\x5', ' ', '\x11', '\x2', '>', '=', '\x3', '\x2', '\x2', '\x2', 
		'?', '\x42', '\x3', '\x2', '\x2', '\x2', '@', '>', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x41', '\x3', '\x2', '\x2', '\x2', '\x41', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x44', '\a', '\x12', '\x2', '\x2', '\x44', '\x45', '\a', '\x6', '\x2', 
		'\x2', '\x45', '\x46', '\x5', '\x1C', '\xF', '\x2', '\x46', 'H', '\a', 
		'\r', '\x2', '\x2', 'G', 'I', '\x5', '\xE', '\b', '\x2', 'H', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'J', 'K', '\a', '\xE', '\x2', '\x2', 'K', '\v', '\x3', 
		'\x2', '\x2', '\x2', 'L', 'M', '\a', '\x6', '\x2', '\x2', 'M', 'N', '\x5', 
		'\x1C', '\xF', '\x2', 'N', 'P', '\a', '\r', '\x2', '\x2', 'O', 'Q', '\x5', 
		'\xE', '\b', '\x2', 'P', 'O', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x3', 
		'\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 'R', '\x62', 
		'\a', '\xE', '\x2', '\x2', 'S', 'U', '\t', '\x2', '\x2', '\x2', 'T', 'S', 
		'\x3', '\x2', '\x2', '\x2', 'U', 'X', '\x3', '\x2', '\x2', '\x2', 'V', 
		'T', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 
		'W', 'Y', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 
		'Y', '^', '\a', '\xF', '\x2', '\x2', 'Z', ']', '\x5', '\x6', '\x4', '\x2', 
		'[', ']', '\a', '\x5', '\x2', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'\\', '[', '\x3', '\x2', '\x2', '\x2', ']', '`', '\x3', '\x2', '\x2', 
		'\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', 
		'\x2', '\x2', '_', '\x61', '\x3', '\x2', '\x2', '\x2', '`', '^', '\x3', 
		'\x2', '\x2', '\x2', '\x61', '\x63', '\a', '\x10', '\x2', '\x2', '\x62', 
		'V', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\r', '\x3', '\x2', '\x2', '\x2', '\x64', 'j', '\x5', '\x10', 
		'\t', '\x2', '\x65', '\x66', '\a', '\x14', '\x2', '\x2', '\x66', 'g', 
		'\a', '\x17', '\x2', '\x2', 'g', 'i', '\x5', '\x10', '\t', '\x2', 'h', 
		'\x65', '\x3', '\x2', '\x2', '\x2', 'i', 'l', '\x3', '\x2', '\x2', '\x2', 
		'j', 'h', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 
		'k', '\xF', '\x3', '\x2', '\x2', '\x2', 'l', 'j', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'q', '\x5', '\x12', '\n', '\x2', 'n', 'q', '\x5', '\"', '\x12', 
		'\x2', 'o', 'q', '\x5', '\x1A', '\xE', '\x2', 'p', 'm', '\x3', '\x2', 
		'\x2', '\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 'o', '\x3', '\x2', 
		'\x2', '\x2', 'q', '\x11', '\x3', '\x2', '\x2', '\x2', 'r', 't', '\a', 
		'\xF', '\x2', '\x2', 's', 'u', '\a', '\x17', '\x2', '\x2', 't', 's', '\x3', 
		'\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', 'v', '|', '\x5', '\x14', '\v', '\x2', 'w', 
		'x', '\a', '\x14', '\x2', '\x2', 'x', 'y', '\a', '\x17', '\x2', '\x2', 
		'y', '{', '\x5', '\x14', '\v', '\x2', 'z', 'w', '\x3', '\x2', '\x2', '\x2', 
		'{', '~', '\x3', '\x2', '\x2', '\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', 
		'|', '}', '\x3', '\x2', '\x2', '\x2', '}', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', '\x7F', 'v', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', '\x80', '\x3', '\x2', '\x2', '\x2', '\x80', '\x82', 
		'\x3', '\x2', '\x2', '\x2', '\x81', '\x83', '\a', '\x17', '\x2', '\x2', 
		'\x82', '\x81', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\x83', '\x84', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', 
		'\a', '\x10', '\x2', '\x2', '\x85', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x87', '\x5', '\x16', '\f', '\x2', '\x87', '\x88', '\a', '\x13', 
		'\x2', '\x2', '\x88', '\x89', '\a', '\x17', '\x2', '\x2', '\x89', '\x8A', 
		'\x5', '\x18', '\r', '\x2', '\x8A', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x8B', '\x8C', '\x5', '\x1C', '\xF', '\x2', '\x8C', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x8D', '\x8E', '\x5', '\x1C', '\xF', '\x2', '\x8E', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x8F', '\x91', '\a', '\a', '\x2', '\x2', 
		'\x90', '\x92', '\x5', '\x1E', '\x10', '\x2', '\x91', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\x91', '\x92', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', 
		'\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\a', '\a', '\x2', '\x2', 
		'\x94', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x95', '\x97', '\a', '\x18', 
		'\x2', '\x2', '\x96', '\x95', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x96', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x99', '\x3', '\x2', '\x2', '\x2', '\x99', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\xA1', '\x5', ' ', '\x11', '\x2', '\x9B', '\xA1', 
		'\a', '\x6', '\x2', '\x2', '\x9C', '\xA1', '\a', '\xF', '\x2', '\x2', 
		'\x9D', '\xA1', '\a', '\x10', '\x2', '\x2', '\x9E', '\xA1', '\a', '\x11', 
		'\x2', '\x2', '\x9F', '\xA1', '\a', '\x12', '\x2', '\x2', '\xA0', '\x9A', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\x9B', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '\x9C', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x9D', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x9F', 
		'\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\xA3', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA7', 
		'\x5', '\"', '\x12', '\x2', '\xA5', '\xA7', '\a', '\x14', '\x2', '\x2', 
		'\xA6', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA5', '\x3', '\x2', 
		'\x2', '\x2', '\xA7', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA6', 
		'\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\x3', '\x2', '\x2', '\x2', 
		'\xA9', '!', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAC', '\t', '\x3', 
		'\x2', '\x2', '\xAB', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', 
		'\x3', '\x2', '\x2', '\x2', '\xAD', '\xAB', '\x3', '\x2', '\x2', '\x2', 
		'\xAD', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAE', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x1B', '\'', '-', '\x34', '\x36', ':', '@', 'H', 'P', 'V', 
		'\\', '^', '\x62', 'j', 'p', 't', '|', '\x7F', '\x82', '\x91', '\x98', 
		'\xA0', '\xA2', '\xA6', '\xA8', '\xAD',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Scriber.Language.Antlr
